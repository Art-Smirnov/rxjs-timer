{"version":3,"sources":["App.jsx","index.js"],"names":["App","useState","timer","setTimer","isRunning","setIsRunning","wait","React","useCallback","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","click$","fromEvent","document","querySelector","buff$","debounceTime","buffer","map","list","length","filter","x","next","complete","start","stop","reset","className","Date","toISOString","slice","ButtonGroup","size","color","Button","onClick","ReactDOM","render","StrictMode","getElementById"],"mappings":"wRAoEeA,MA3Df,WACE,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAOC,IAAMC,aAAY,WAC7BH,GAAa,KACZ,IAEHI,qBAAU,WACR,IAAMC,EAAe,IAAIC,IACzBC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,YACS,IAAdX,GACFD,GAAS,SAACa,GAAD,OAASA,EAAM,UAI9B,IAAMC,EAASC,YAAUC,SAASC,cAAc,gBAAiB,SAC3DC,EAAQJ,EAAOJ,KAAKS,YAAa,MAUvC,OARqBL,EAAOJ,KAC1BU,YAAOF,GACPG,aAAI,SAACC,GAAD,OAAUA,EAAKC,UACnBC,aAAO,SAACC,GAAD,OAAa,IAANA,MAGHb,WAAU,kBAAMT,OAEtB,WACLI,EAAamB,OACbnB,EAAaoB,cAEd,CAAC1B,EAAWE,IAEf,IAAMyB,EAAQxB,IAAMC,aAAY,WAC9BH,GAAa,KACZ,IACG2B,EAAOzB,IAAMC,aAAY,WAC7BH,GAAa,GACbF,EAAS,KACR,IAEG8B,EAAQ1B,IAAMC,aAAY,WAC9BL,EAAS,KACR,IAEH,OACE,sBAAK+B,UAAU,QAAf,UACE,uBAAMA,UAAU,gBAAhB,cAAkC,IAAIC,KAAKjC,GAAOkC,cAAcC,MAAM,GAAI,OAC1E,eAACC,EAAA,EAAD,CAAaC,KAAK,QAAQC,MAAM,UAAU,aAAW,sCAArD,UACE,eAACC,EAAA,EAAD,CAAQC,QAAStC,EAAY4B,EAAOD,EAApC,cAA6C3B,EAAY,OAAS,WAClE,cAACqC,EAAA,EAAD,CAAQC,QAAST,EAAjB,mBACA,cAACQ,EAAA,EAAD,CAAQP,UAAU,cAAlB,yB,MCzDRS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAAS2B,eAAe,W","file":"static/js/main.638b1d7c.chunk.js","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { interval, Subject, fromEvent } from \"rxjs\";\nimport { takeUntil, map, buffer, debounceTime, filter } from \"rxjs/operators\";\n\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport \"./App.css\";\n\nfunction App() {\n  const [timer, setTimer] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n\n  const wait = React.useCallback(() => {\n    setIsRunning(false);\n  }, []);\n\n  useEffect(() => {\n    const unsubscribe$ = new Subject();\n    interval(1000)\n      .pipe(takeUntil(unsubscribe$))\n      .subscribe(() => {\n        if (isRunning === true) {\n          setTimer((val) => val + 1000);\n        }\n      });\n\n    const click$ = fromEvent(document.querySelector(\".wait-button\"), \"click\");\n    const buff$ = click$.pipe(debounceTime(300));\n\n    const doubleClick$ = click$.pipe(\n      buffer(buff$),\n      map((list) => list.length),\n      filter((x) => x === 2)\n    );\n\n    doubleClick$.subscribe(() => wait());\n\n    return () => {\n      unsubscribe$.next();\n      unsubscribe$.complete();\n    };\n  }, [isRunning, wait]);\n\n  const start = React.useCallback(() => {\n    setIsRunning(true);\n  }, []);\n  const stop = React.useCallback(() => {\n    setIsRunning(false);\n    setTimer(0);\n  }, []);\n\n  const reset = React.useCallback(() => {\n    setTimer(0);\n  }, []);\n\n  return (\n    <div className=\"timer\">\n      <span className=\"timer-numbers\"> {new Date(timer).toISOString().slice(11, 19)}</span>\n      <ButtonGroup size=\"large\" color=\"primary\" aria-label=\"large outlined primary button group\">\n        <Button onClick={isRunning ? stop : start}> {isRunning ? 'Stop' : 'Start'}</Button>\n        <Button onClick={reset}>Reset</Button>\n        <Button className=\"wait-button\">Wait</Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\";\nimport \"modern-normalize/modern-normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}